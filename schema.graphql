type User @entity {
  "Address"
  id: ID!
  "Address"
  address: Bytes!
  #tokens: [TokenBalance!] @derivedFrom(field: "user")
  orders: [Order!] @derivedFrom(field: "user")
  giveTrades: [PairUserToTrade!] @derivedFrom(field: "user")
  getTrades: [PairUserToTrade!] @derivedFrom(field: "user")
  deposits: [Deposit!] @derivedFrom(field: "user")
  withdraws: [Withdraw!] @derivedFrom(field: "user")
  cancels: [Cancel!] @derivedFrom(field: "user")
  activities: [PairActivityToUser!] @derivedFrom(field: "user")
}

type Token @entity {
  "Address"
  id: ID!
  "Address"
  address: String!
  "Name"
  name: String
}

# "ERC20 Token per User"
# type TokenBalance @entity {
#   "(User Address of Token)-(Address of Token)"
#   id: ID!
#   "User Address of Token"
#   user: User!
#   "Address of Token"
#   token: Token!
#   balance: BigInt!
# }

type Order @entity {
  id: ID!
  block_number: BigInt!
  timestamp: BigInt!
  user: User!
  amountGive: BigInt!
  amountGet: BigInt!
  tokenGive: Token!
  tokenGet: Token!
  activities: [PairActivityToOrder!] @derivedFrom(field: "order")
}

type Trade @entity {
  id: ID!
  block_number: BigInt!
  timestamp: BigInt!
  amountGive: BigInt!
  amountGet: BigInt!
  tokenGive: Token!
  tokenGet: Token!
  getUser: User!
  giveUser: User!
  activities: [PairActivityToTrade!] @derivedFrom(field: "trade")
}
type Deposit @entity {
  id: ID!
  block_number: BigInt!
  timestamp: BigInt!
  user: User!
  amount: BigInt!
  token: Token!
  balance: BigInt!
}
type Withdraw @entity {
  id: ID!
  block_number: BigInt!
  timestamp: BigInt!
  user: User!
  amount: BigInt!
  token: Token!
  balance: BigInt!
}
type Cancel @entity {
  id: ID!
  block_number: BigInt!
  timestamp: BigInt!
  user: User!
  amountGive: BigInt!
  amountGet: BigInt!
  tokenGive: Token!
  tokenGet: Token!
}

# Stats of EtherDelta Things
type Activity @entity {
  "block_timestamp/60/60/24 (0 is current id)"
  id: ID!
  "for sorting purposes"
  dayTimestamp: BigInt!
  orders: [PairActivityToOrder!] @derivedFrom(field: "activity")
  trade: [PairActivityToTrade!] @derivedFrom(field: "activity")
  deposit: [PairActivityToDeposit!] @derivedFrom(field: "activity")
  withdraw: [PairActivityToWithdraw!] @derivedFrom(field: "activity")
  cancel: [PairActivityToCancel!] @derivedFrom(field: "activity")

  TotalOrderCount: BigInt!
  TotalCancelCount: BigInt!
  NetOrderCount: BigInt!
  TotalDeposits: BigInt!
  TotalWithdraws: BigInt!
  NetDeposits: BigInt!
  TotalTradeCount: BigInt!

  TokenActivity: [PairActivityToToken!] @derivedFrom(field: "activity")
  UniqueUsers: [PairActivityToUser!] @derivedFrom(field: "activity")
}

type TokenActivity @entity {
  "block_timestamp/60/60/24-address (0 is the current id)"
  id: ID!
  "for sorting purposes"
  dayTimestamp: BigInt!
  "token address"
  address: String!
  tradeCount: BigInt!
  withdrawCount: BigInt!
  depositCount: BigInt!
  orderCount: BigInt!
  cancelCount: BigInt!
  Activity: [PairActivityToToken!] @derivedFrom(field: "tokenActivity")
}

type PairActivityToToken @entity {
  "activity-tokenActivity"
  id: ID!
  activity: Activity! 
  tokenActivity: TokenActivity! 
}

type PairActivityToUser @entity {
  "activity-user"
  id: ID!
  activity: Activity! 
  user: User! 
}

type PairActivityToOrder @entity {
  "activity-Order"
  id: ID!
  activity: Activity! 
  order: Order! 
}
type PairActivityToTrade @entity {
  "activity-Trade"
  id: ID!
  activity: Activity! 
  trade: Trade! 
}
type PairActivityToDeposit @entity {
  "activity-Deposit"
  id: ID!
  activity: Activity! 
  deposit: Deposit! 
}
type PairActivityToWithdraw @entity {
  "activity-Withdraw"
  id: ID!
  activity: Activity! 
  withdraw: Withdraw! 
}
type PairActivityToCancel @entity {
  "activity-Cancel"
  id: ID!
  activity: Activity! 
  cancel: Cancel! 
}
type PairUserToTrade @entity {
  "user-Trade"
  id: ID!
  user: User! 
  trade: Trade! 
}